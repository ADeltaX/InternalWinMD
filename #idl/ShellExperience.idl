import "inspectable.idl";
import "EventToken.idl";
import "AsyncInfo.idl";
import "windowscontracts.idl";
import "Windows.Foundation.idl";
import "Windows.ApplicationModel.Contacts.idl";
import "Windows.UI.Popups.idl";

namespace Windows.Internal.Shell.Experience
{
	enum CortanaAppTransitionType
	{
		None = 0x0,
		IsolatedLaunch = 0x1,
		TransitionFromStart = 0x2,
		QFGoWideFromDefault = 0x3,
		QFGoWideFromStart = 0x4,
		TransitionSearchToCortana = 0x5,
		TransitionCortanaToSearch = 0x6
	};
	
	enum ImeMode
	{
		None = 0x0,
		JapanAlphabet = 0x1,
		JapanHiragana = 0x2
	};
	
	enum FocusNavigateDirection
	{
		Up = 0x0,
		Down = 0x1,
		Next = 0x2,
		Prev = 0x3
	};
	
	enum VirtualTouchpadPosition
	{
		Default = 0x0,
		UsePreviousIfAvailable = 0x1
	};
	
	enum ScreenClipInvocationType
	{
		Unknown = 0x0,
		PenButton = 0x1,
		QuickActions = 0x2,
		PrintScreen = 0x3,
		HotKey = 0x4,
		ScreenSketch = 0x5,
		SearchBox = 0x6
	};
	
	enum PenWorkspaceVerb
	{
		Unknown = 0xFFFFFFFF,
		Home = 0x0,
		Remember = 0x1,
		Create = 0x2,
		Capture = 0x3
	};

	[version(0x00000001)]
	[uuid("2e8fcb18-a0ee-41ad-8ef8-77fb3a370ca5")]
	interface IShellExperienceManagerFactory
	{
		Object GetExperienceManager(String experienceId);
	}
	
	[version(0x00000001)]
	[uuid("fd8022e5-1099-53f9-b49a-b39bf3f15861")]
	interface IBaseExperienceManager
	{
        Boolean IsVisible { get; set; };
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.IBaseExperienceManager, Windows.Internal.Shell.Experience.IVisibilityChangedEventArgs> VisibilityChanged;
        void SetVisibilityWithoutAnimations(Boolean a);
	}
	
	[version(0x00000001)]
	[uuid("df65db57-d504-456e-8bd7-004ce308d8d9")]
	interface IActionCenterExperienceManager
	{
		void Unknown(UInt32 val); //It should be an enum, but it works only if it is set to 0 (it opens the ActionCenterMeme)
	}
	
	[version(0x00000001)]
	runtimeclass ActionCenterExperienceManager
	{
		interface Windows.Internal.Shell.Experience.IBaseExperienceManager;
		[default] interface Windows.Internal.Shell.Experience.IActionCenterExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("d763448f-c4e9-45fe-8492-f45e1e2aab4c")]
	interface IShellFeedsExperienceManager
	{
		void SetPositioningAnchorRect(UInt32 shellFeedsButtonType, Windows.Foundation.Rect rect); //ShellFeedsButtonType
		void NotifyTaskbarButtonInteraction(); //TODO
		void NotifyFeedsButtonVisibilityChanged(); //TODO
		void Poke(); //TODO
	}
	
	[version(0x00000001)]
	runtimeclass ShellFeedsExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IShellFeedsExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("8b6ebc6f-30f2-401b-a050-9f0b7f35f35d")]
	interface IToastCenterExperienceManager
	{
		void Unknown(UInt32 val); //Enum
	}
	
	[version(0x00000001)]
	runtimeclass ToastCenterExperienceManager
	{
		interface Windows.Internal.Shell.Experience.IBaseExperienceManager;
		[default] interface Windows.Internal.Shell.Experience.IToastCenterExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("3b810852-511f-4404-89ae-347bc2e8b561")]
	interface ICortanaExperienceManager
	{
        void Prelaunch(Boolean a);
        void Show(String a, CortanaAppTransitionType cortanaAppTransitionType);
        void SetPositioningAnchorRect(Windows.Foundation.Rect a, Windows.Foundation.Rect b);
        void ShowWithStart(Boolean a);
        void WorkAreaMayHaveChanged();
        void Hide();
        void MinimizeToBoxMode();
        void TakeKeyboardFocus();
        void PrepareForAppTransition(CortanaAppTransitionType cortanaAppTransitionType);
        Boolean CanTransitionFromStart();
        void EnsureForegroundRights();
        void PearlRectMayHaveChanged();
        void Uncloak();
        Boolean SuggestionsShowing { get; };
        Boolean IsExplicitDismissEnabled { get; };
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Windows.Internal.Shell.Experience.ICortanaShownEventArgs> Shown;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> Hidden;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> Destroyed;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> SuggestionsShown;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> SuggestionsHidden;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> SetForegroundFailed;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Windows.Internal.Shell.Experience.IFocusNavigateEventArgs> FocusNavigate;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> StartAndCortanaDismissRequested;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> AppRequestedDismiss;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> AppRequestedTransition;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> AppTransitionCompleted;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, int> LaunchResult;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> DeviceLocked;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Object> DeviceUnlocked;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.CortanaExperienceManager, Windows.Foundation.Rect> NotifyRelaunch;
        UInt64 GetWindowHandle();
        Boolean LockCurtainShowing { get; };
        void NotifyUIATreesUnlinked();
	}
	
	[version(0x00000001)]
	runtimeclass CortanaExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ICortanaExperienceManager;
	}
	
	//Yes, they are the same as for 19041
	[version(0x00000001)]
	runtimeclass SearchAppExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ICortanaExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("08f4f43b-7be0-4a08-b5df-24044d7e8b72")]
	interface IImeStatusNotificationExperienceManager
	{
		void SetMode(ImeMode imeMode);
	}
	
	[version(0x00000001)]
	runtimeclass ImeStatusNotificationExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IImeStatusNotificationExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("075fd233-0985-4b7d-a756-3293380d1b4c")]
	interface ITaskContinuityActivitiesExperienceManager
	{
        void Show();
        void Hide();
	}
	
	[version(0x00000001)]
	runtimeclass TaskContinuityActivitiesExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ITaskContinuityActivitiesExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("c2d211a1-a6d4-49b5-9704-d74cb4dff1ee")]
	interface IStartExperienceManager
	{
        void Prelaunch(Boolean a);
        void Show(Boolean a, Boolean b, UInt32 c);
        UInt32 Hide();
        void DimStart();
        void UnDimStart();
        void TakeKeyboardFocus(FocusNavigateDirection focusNavigateDirection);
        Windows.Foundation.Size GetStartSize();
        void WorkAreaMayHaveChanged();
        void PlayTransitionToCortana();
        Boolean GetIsFullScreen();
        void BringToForeground();
        Boolean IsWindowFullyVisible();
        void Uncloak();
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.StartExperienceManager, Object> Shown;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.StartExperienceManager, Object> Hidden;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.StartExperienceManager, Object> Destroyed;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.StartExperienceManager, Object> NotifyFocus;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.StartExperienceManager, Object> DismissRequested;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.StartExperienceManager, Object> ExitTransitionToCortanaCompleted;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.StartExperienceManager, Object> SetForegroundFailed;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.StartExperienceManager, int> LaunchResult;
        UInt64 GetWindowHandle();
	}
	
	[version(0x00000001)]
	runtimeclass StartExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IStartExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("8667db0d-6960-465f-b9a4-c461863efa91")]
	interface IShoulderTapExperienceManager
	{
        void ShoulderTap(String a, String b, String c, String d, Int32 e, Int32 f, Int32 g, String h, String i, String j);
        void FocusHotkeyInvoked();
	}
	
	[version(0x00000001)]
	runtimeclass ShoulderTapExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IShoulderTapExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("95fc070d-cc20-44e5-8c0d-75ed8f7100b0")]
	interface IJumpViewExperienceManager
	{
        void Show(String json);
        void Dismiss();
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.JumpViewExperienceManager, Windows.Internal.Shell.Experience.JumpViewExperienceEventArgs> Shown;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.JumpViewExperienceManager, Windows.Internal.Shell.Experience.JumpViewExperienceEventArgs> Hidden;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.JumpViewExperienceManager, Windows.Internal.Shell.Experience.JumpViewExperienceEventArgs> Cancelled;
	}
	
	[version(0x00000001)]
	runtimeclass JumpViewExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IJumpViewExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("7fec38c1-a520-4797-848f-66efa8bd3502")]
	interface IQuickConnectExperienceManager
	{
        void ShowContactCard(Guid a, UInt64 hwndAsUINT64, Windows.ApplicationModel.Contacts.Contact contact, Windows.Foundation.Rect invocationRect, enum Windows.UI.Popups.Placement preferredPlacement, Windows.ApplicationModel.Contacts.ContactCardOptions contactCardOptions, Single userLogicalDpi, Boolean isDelayloadMode);
        void PopulateDelayLoadedContactCard(Guid a, Windows.ApplicationModel.Contacts.Contact contact);
        void ExitContactCard();
	}
	
	[version(0x00000001)]
	runtimeclass QuickConnectExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IQuickConnectExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("17c4ec91-62df-486d-aa0d-6a11c725e414")]
	interface IVirtualTouchpadExperienceManager
	{
        void Show(VirtualTouchpadPosition virtualTouchpadPosition, Windows.Foundation.Rect b);
        void Hide();
        Boolean IsVisible { get; };
        Boolean AreExperienceViewAndCursorOnTheSameMonitor { get; };
	}
	
	[version(0x00000001)]
	runtimeclass VirtualTouchpadExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IVirtualTouchpadExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("93acf1bc-b1c9-423a-9fa5-d80c0935ddee")]
	interface IScreenClippingExperienceManager
	{
        void LaunchOrToggle(ScreenClipInvocationType screenClipInvocationType);
        Object GetScreenClippingBrokerAsIInspectable();
	}
	
	[version(0x00000001)]
	runtimeclass ScreenClippingExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IScreenClippingExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("f7e42d9f-f76a-4f44-a458-6ecbdd76d2b9")]
	interface IInsightsExperienceManager
	{
        void Launch();
	}
	
	[version(0x00000001)]
	runtimeclass InsightsExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IInsightsExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("1b7781cd-1b97-4728-8b6e-67a7e55cc53c")]
	interface IPeopleBarFlyoutExperienceManager
	{
        void ShowFlyout(Windows.Foundation.Point positionPoint);
        void HideFlyout();
        Boolean IsFlyoutOpen();
	}
	
	[version(0x00000001)]
	runtimeclass PeopleBarFlyoutExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IPeopleBarFlyoutExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("ab65b025-ff88-470a-9513-b62bcd7ce879")]
	interface IPeopleBarJumpViewExperienceManager
	{
        void Show(String a);
        void Dismiss();
	}
	
	[version(0x00000001)]
	runtimeclass PeopleBarJumpViewExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IPeopleBarJumpViewExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("2410129c-64a0-4b85-9e61-12caec38d6ef")]
	interface IHostExperienceManager
	{
        void AllowSuspension(Boolean a);
	}
	
	[version(0x00000001)]
	runtimeclass HostExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IHostExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("6a9391e9-c8c9-4a1b-b31f-1f6f529ca573")]
	interface IPenWorkspaceExperienceManager
	{
        void LaunchOrTogglePenWorkspace(PenWorkspaceVerb penWorkspaceVerb);
        void LaunchOrTogglePenWorkspaceHome(Boolean value);
        void LaunchOrTogglePenWorkspaceFromPoint(PenWorkspaceVerb penWorkspaceVerb, Windows.Foundation.Point b);
        void BringToForeground();
        void ClosePenWorkspace();
	}
	
	[version(0x00000001)]
	runtimeclass PenWorkspaceExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IPenWorkspaceExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("984634c4-91f4-4a71-89ca-5baa258a1d7b")]
	interface ISoftLandingExperienceManager
	{
        void FocusHotkeyInvoked();
	}
	
	[version(0x00000001)]
	runtimeclass SoftLandingExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ISoftLandingExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("599db028-e1d3-433d-9f90-32468634d59e")]
	interface IInputDialExperienceManager 
	{
        void StartDeviceListener();
        void Register(UInt64 menuWindow, UInt64 inputSink, Windows.Foundation.EventHandler<Object> handler, UInt32 sectionId, EventRegistrationToken token);
        void Unregister(UInt64 menuWindow, UInt32 sectionId, EventRegistrationToken token);
        void AddCustomMenuItemWithKnownIcon(UInt64 menuWindow, UInt32 sectionId, UInt32 insertionIndex, String displayText, UInt32 itemId, UInt32 knownIcon);
        void AddCustomMenuItemWithIcon(UInt64 menuWindow, UInt32 sectionId, UInt32 insertionIndex, String displayText, UInt32 itemId, Windows.Storage.Streams.IRandomAccessStreamReference icon);
        void AddCustomMenuItemWithGlyph(UInt64 menuWindow, UInt32 sectionId, UInt32 insertionIndex, String displayText, String fontGlyph, String fontFamily, String fontFilePath, UInt32 itemId);
        void RemoveCustomMenuItem(UInt64 menuWindow, UInt32 sectionId, UInt32 itemId);
        void ClearCustomItems(UInt64 menuWindow, UInt32 sectionId);
        void SetDefaultMenuItems(UInt64 menuWindow, IIterable<Windows.UI.Input.RadialControllerSystemMenuItemKind> b);
        void SelectDefaultMenuItem(UInt64 menuWindow, UInt32 itemId, out Boolean isSelectionSuccessful);
        void SelectPreviouslyActiveMenuItem(UInt64 menuWindow, out Boolean isSelectionSuccessful);
        void SetSelectedMenuItem(UInt64 menuWindow, UInt32 sectionId, UInt32 itemId, Boolean __formal);
        void GetSelectedMenuItem(UInt64 menuWindow, out UInt32 sectionId, out UInt32 itemId);
        void InvokeDispatched(UInt64 inputSink);
        void ResetDefaultMenuItems(UInt64 menuWindow);
        void SuppressMenu(UInt64 menuWindow, Boolean isMenuSuppressed, UInt64 inputSink);
        void SetApplicationController(UInt64 menuWindow, Boolean enabledState, UInt64 inputSink, Boolean controllerIsNotNull);
	}
	
	[version(0x00000001)]
	runtimeclass InputDialExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IInputDialExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("a40cce11-67ee-4e74-8c46-91edb265261c")]
	interface ILockScreenExperienceManager
	{
        void Show();
        void Hide();
        void PositionApplication();
        void SetDesiredPosition(Windows.Foundation.Rect a);
        String GetApplicationId();
        Boolean IsExperienceView(String a, UInt64 b);
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.LockScreenExperienceManager, int> ActivationFailed;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.LockScreenExperienceManager, Object> Shown;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.LockScreenExperienceManager, Object> ViewDestroyed;
        void BringToForeground();
        void DestroyView();
        void TerminateIfNecessary();
	}
	
	[version(0x00000001)]
	runtimeclass LockScreenExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ILockScreenExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("7154c95d-c519-49bd-a97e-645bbfabe111")]
	interface ITrayMtcUvcFlyoutExperienceManager
	{
        void ShowFlyout(Windows.Foundation.Rect trayItemRect);
        void HideFlyout();
	}
	
	[version(0x00000001)]
	runtimeclass TrayMtcUvcFlyoutExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ITrayMtcUvcFlyoutExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("c9ddc674-b44b-4c67-9d79-2b237d9be05a")]
	interface INetworkFlyoutExperienceManager
	{
        void ShowFlyout(Windows.Foundation.Rect trayItemRect, UInt64 b);
        void HideFlyout();
	}
	
	[version(0x00000001)]
	[uuid("E44F17E6-AB85-409C-8D01-17D74BEC150E")]
	interface INetworkFlyoutExperienceManager18362
	{
        void ShowFlyout(Windows.Foundation.Rect trayItemRect);
        void HideFlyout();
	}
	
	[version(0x00000001)]
	[uuid("ea565573-2887-4dcf-a6f7-4b52b8098df9")]
	interface IMiracastBannerExperienceManager
	{
        void Initialize();
        void ShowFlyout();
        void HideFlyout();
        void DelayedDestroyFlyout();
        void DestroyFlyout();
        void SetPinned(Boolean fIsPinned);
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.MiracastBannerExperienceManager, Object> Dismissed;
        event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.MiracastBannerExperienceManager, Windows.Internal.Shell.Experience.IMiracastBannerResizeEventArgs> Resized;
	}
	
	[version(0x00000001)]
	runtimeclass MiracastBannerExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IMiracastBannerExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("0a73aedc-1c68-410d-8d53-63af80951e8f")]
	interface ITrayBatteryFlyoutExperienceManager
	{
		void ShowFlyout(Windows.Foundation.Rect trayItemRect);
		void HideFlyout();
	}
	
	[version(0x00000001)]
	runtimeclass TrayBatteryFlyoutExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ITrayBatteryFlyoutExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("b1604325-6b59-427b-bf1b-80a2db02d3d8")]
	interface ITrayClockFlyoutExperienceManager
	{
		void ShowFlyout(Windows.Foundation.Rect trayItemRect);
		void HideFlyout();
		Boolean IsVisible();
	}
	
	[version(0x00000001)]
	runtimeclass TrayClockFlyoutExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ITrayClockFlyoutExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("0a57aff4-7ba4-49bf-88f0-b60d42d40a78")]
	interface ISharePickerExperienceManager
	{
		void Show(Object sharingOperation, Windows.Internal.Shell.Share.ShareExperienceCallbacks shareExperienceCallbacks, String correlationVector); //Windows.ApplicationModel.Internal.DataTransfer.SharingOperation 
		void ShowErrorMessage(UInt64 parentWindow);
		void Hide();
		String HostAppPackageFamilyName { get; };
	}
	
	[version(0x00000001)]
	runtimeclass SharePickerExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.ISharePickerExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("af056671-a2c2-431f-9e6e-feced34ce6a9")]
	interface IDevicePickerExperienceManager
	{
		void Initialize(Guid pickerId, UInt32 callingProcessId, UInt64 parentWindow);
		void ShowFlyout(Windows.Foundation.Rect position, Windows.UI.Popups.Placement placement);
		void HideFlyout();
		event Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.Experience.DevicePickerExperienceManager, Object> Dismissed;
	}
	
	[version(0x00000001)]
	runtimeclass DevicePickerExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IDevicePickerExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("4f8c32e2-f707-4d00-ad96-edffd27b6b73")]
	interface IDeviceDiscoveryExperienceManager
	{
		void ShowFlyout();
		void HideFlyout();
		void SetFlyoutTitle(String title);
	}
	
	[version(0x00000001)]
	runtimeclass DeviceDiscoveryExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IDeviceDiscoveryExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("aa5bb64c-3f65-470f-a4e2-74834bc300c5")]
	interface IDisplayTopologyChangeExperienceManager
	{
		void ShowFlyout();
		void HideFlyout();
	}
	
	[version(0x00000001)]
	runtimeclass DisplayTopologyChangeExperienceManager
	{
		[default] interface Windows.Internal.Shell.Experience.IDisplayTopologyChangeExperienceManager;
	}
		
	//-----------------ARGS
	
	[version(0x00000001)]
	[uuid("d7756afb-9b2b-4f00-9229-88209b0e8953")]
	interface IMiracastBannerResizeEventArgs
	{
        Boolean CrossedMinimumThreshold { get; };
        Boolean ButtonsMinimized { get; };
	}
		
	[version(0x00000001)]
	[uuid("afe9aba4-877b-44b7-b9cb-1d0c97c6b204")]
	interface IJumpViewExperienceEventArgs
	{
		String Unknown();
	}
	
	[version(0x00000001)]
	runtimeclass JumpViewExperienceEventArgs
	{
		[default] interface Windows.Internal.Shell.Experience.IJumpViewExperienceEventArgs;
	}
	
	[version(0x00000001)]
	[uuid("9697311c-768a-4cd5-9b37-049855339820")]
	interface ICortanaShownEventArgs
	{
		Object Unknown(); //struct of something
	}
	
	[version(0x00000001)]
	[uuid("b0f15396-8df4-4167-b062-b2c66f34efbb")]
	interface IFocusNavigateEventArgs
	{
		FocusNavigateDirection Unknown();
	}
	
	[version(0x00000001)]
	[uuid("b27335b3-309e-40d6-8ed5-36dda0289f16")]
	interface IVisibilityChangedEventArgs
	{
		//empty
	}
}

namespace Windows.Internal.Shell.Share
{
	[version(0x00000001)]
	[uuid("bd8defd0-d961-4f83-8e79-a0f50c52c63c")]
	interface IShareExperienceCallbacks
	{
		void Unknown1();
		void Unknown2(Object shareAppExtension); //Windows::ApplicationModel::Internal::DataTransfer::IShareAppExtension
		void Unknown3(Object shareProvider); //Windows::ApplicationModel::DataTransfer::IShareProvider
		void Unknown4();
		void Unknown5(String str);
		void Unknown6(Windows.System.RemoteSystems.RemoteSystem remoteSystem);
	}
	
	[version(0x00000001)]
	runtimeclass ShareExperienceCallbacks
	{
		[default] interface Windows.Internal.Shell.Share.IShareExperienceCallbacks;
	}
}

namespace Windows.Internal.Shell.ModalExperience
{
	
	enum ModalExperienceViewState
	{
		Abnormal = 0x0,
		ViewCreated = 0x1,
		ViewVisible = 0x2,
		ViewClosed = 0x3,
		ViewHidden = 0x4
	};

	[version(0x00000001)]
	[uuid("faacf24c-7de0-4ea3-9d2a-0dcc7475e219")]
	interface IModalWindowExperienceManager
	{
        void ShowForLaunch(String appUserModelID, String launchArguments, Windows.Internal.Shell.ModalExperience.ModalExperienceDefaultOptions experienceCustomizationProperties, UInt32 parentWindowInstanceID, Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.ModalExperience.IModalWindowExperienceManager, Windows.Internal.Shell.ModalExperience.ModalExperienceEventArgs> eventHandler, EventRegistrationToken experienceToken);
        void ShowForContractByAppID(String appUserModelID, String contractID, Object activatedEventArgs, Windows.Internal.Shell.ModalExperience.ModalExperienceDefaultOptions experienceCustomizationProperties, UInt32 parentWindowInstanceID, Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.ModalExperience.IModalWindowExperienceManager, Windows.Internal.Shell.ModalExperience.ModalExperienceEventArgs> eventHandler, EventRegistrationToken experienceToken);
        void ShowForContractWithPlugin(String appUserModelID, String extensionID, String contractID, Guid activationEventArgumentFactoryId, Object activationEventArgumentContext, Windows.Internal.Shell.ModalExperience.ModalExperienceDefaultOptions experienceCustomizationProperties, UInt32 parentWindowInstanceID, Windows.Foundation.TypedEventHandler<Windows.Internal.Shell.ModalExperience.IModalWindowExperienceManager, Windows.Internal.Shell.ModalExperience.ModalExperienceEventArgs> eventHandler, EventRegistrationToken experienceToken);
        void ChangeModalExperienceProperties(EventRegistrationToken experienceToken, Windows.Internal.Shell.ModalExperience.ModalExperienceDefaultOptions customizationProperties);
        void UnregisterFromModalExperienceEvents(EventRegistrationToken experienceToken);
        void Dismiss(EventRegistrationToken experienceToken);
        void GetExistingExperienceForOwnerWindow(UInt32 parentWindowInstanceID, out EventRegistrationToken experienceToken);
        void ShowExperience(EventRegistrationToken experienceToken);
	}
	
	[version(0x00000001)]
	runtimeclass ModalWindowExperienceManager
	{
		[default] interface Windows.Internal.Shell.ModalExperience.IModalWindowExperienceManager;
	}
	
	[version(0x00000001)]
	[uuid("074e185b-ef4b-4231-9a8e-eb1bb4ef2099")]
	interface IModalExperienceDefaultOptions
	{
			//THIS HAS 18 MEMBERS
			//TODO
	}
	
	[version(0x00000001)]
	runtimeclass ModalExperienceDefaultOptions
	{
		[default] interface Windows.Internal.Shell.ModalExperience.IModalExperienceDefaultOptions;
	}
	
	[version(0x00000001)]
	[uuid("64ea1e5c-e838-43eb-bdde-09bc5aee78c0")]
	interface IModalExperienceEventArgs
	{
        EventRegistrationToken ExperienceID { get; };
        UInt32 ProcessId { get; };
        ModalExperienceViewState GetState { get; };
	}
	
	[version(0x00000001)]
	runtimeclass ModalExperienceEventArgs
	{
		[default] interface Windows.Internal.Shell.ModalExperience.IModalExperienceEventArgs;
	}
}

namespace Windows.Internal.RetailDemo
{
	[version(0x00000001)]
	[uuid("c83ec4e0-068f-4a90-a1c7-20841a08f99f")]
	interface IRetailDemoExperienceManager
	{
        void Show();
        void Hide();
        void Close();
        void Dock(Int32 a, Int32 b, Int32 c, Int32 d);
        void Float(Int32 a, Int32 b, Int32 c, Int32 d);
        void GetReservedSpace(Int32 a, Int64 b, Int64 c, Int64 d);
        void SetTopmost(Int32 a);
        void SetWindowBand(Int32 a);
        void LaunchApplication(String a, String b, String c);
	}
	
	[version(0x00000001)]
	runtimeclass RetailDemoExperienceManager
	{
		[default] interface Windows.Internal.RetailDemo.IRetailDemoExperienceManager;
	}
}